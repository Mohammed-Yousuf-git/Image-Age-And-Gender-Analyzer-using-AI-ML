{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f448b7ec-392a-4684-832c-49045e191d70",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
    "from tensorflow.keras.applications import MobileNetV2\n",
    "from tensorflow.keras.models import Model, load_model\n",
    "from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Dropout\n",
    "import os\n",
    "from PIL import Image\n",
    "import cv2\n",
    "import streamlit as st\n",
    "from deepface import DeepFace\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Custom CSS for better UI\n",
    "st.markdown(\n",
    "    \"\"\"\n",
    "    <style>\n",
    "    .main {\n",
    "        background-color: #f0f2f6;\n",
    "        padding: 20px;\n",
    "        border-radius: 10px;\n",
    "    }\n",
    "    .card {\n",
    "        background-color: white;\n",
    "        padding: 15px;\n",
    "        border-radius: 10px;\n",
    "        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n",
    "        margin-bottom: 20px;\n",
    "    }\n",
    "    .sidebar .sidebar-content {\n",
    "        background-color: #e9ecef;\n",
    "        padding: 10px;\n",
    "        border-radius: 10px;\n",
    "    }\n",
    "    h1 {\n",
    "        color: #2c3e50;\n",
    "        text-align: center;\n",
    "    }\n",
    "    h3 {\n",
    "        color: #34495e;\n",
    "    }\n",
    "    .stButton>button {\n",
    "        background-color: #3498db;\n",
    "        color: white;\n",
    "        border: none;\n",
    "        padding: 10px 20px;\n",
    "        border-radius: 5px;\n",
    "        cursor: pointer;\n",
    "    }\n",
    "    .stButton>button:hover {\n",
    "        background-color: #2980b9;\n",
    "    }\n",
    "    </style>\n",
    "    \"\"\",\n",
    "    unsafe_allow_html=True\n",
    ")\n",
    "\n",
    "# Load the trained age classifier model\n",
    "model_path = \"/Users/usufahmed/Desktop/gender_app/faces/models/age_classifier.keras\"\n",
    "if not os.path.exists(model_path):\n",
    "    raise FileNotFoundError(f\"Model file {model_path} not found. Please train and save the model first.\")\n",
    "age_model = load_model(model_path)\n",
    "\n",
    "# Define image parameters\n",
    "IMG_SIZE = (224, 224)\n",
    "BATCH_SIZE = 32\n",
    "\n",
    "# Function to preprocess and predict age group\n",
    "def predict_age_group(image_path):\n",
    "    try:\n",
    "        img = Image.open(image_path).convert('RGB')\n",
    "        img = img.resize(IMG_SIZE)\n",
    "        img_array = np.expand_dims(np.array(img) / 255.0, axis=0)\n",
    "        prediction = age_model.predict(img_array)\n",
    "        class_names = ['MIDDLE', 'OLD', 'YOUNG']\n",
    "        predicted_class = class_names[np.argmax(prediction)]\n",
    "        return predicted_class, prediction[0]\n",
    "    except Exception as e:\n",
    "        return f\"Error predicting age: {e}\", None\n",
    "\n",
    "# Function to predict gender using DeepFace\n",
    "def predict_gender(image_path):\n",
    "    try:\n",
    "        result = DeepFace.analyze(img_path=image_path, actions=['gender'], enforce_detection=False)\n",
    "        gender_probs = result[0]['gender']\n",
    "        return gender_probs\n",
    "    except Exception as e:\n",
    "        return {\"Error\": str(e)}\n",
    "\n",
    "# Function to generate Grad-CAM heatmap for age model\n",
    "def grad_cam(model, img_array, last_conv_layer_name=\"block_16_project\"):\n",
    "    grad_model = Model([model.inputs], [model.get_layer(last_conv_layer_name).output, model.output])\n",
    "    with tf.GradientTape() as tape:\n",
    "        conv_outputs, predictions = grad_model(img_array)\n",
    "        class_idx = np.argmax(predictions[0])\n",
    "        loss = predictions[:, class_idx]\n",
    "    grads = tape.gradient(loss, conv_outputs)\n",
    "    pooled_grads = tf.reduce_mean(grads, axis=(0, 1, 2))\n",
    "    conv_outputs = conv_outputs[0]\n",
    "    heatmap = tf.reduce_mean(tf.cast(conv_outputs, tf.float32) * pooled_grads, axis=-1)\n",
    "    heatmap = np.maximum(heatmap, 0) / np.max(heatmap)\n",
    "    heatmap = cv2.resize(heatmap.numpy(), (img_array.shape[2], img_array.shape[1]))\n",
    "    heatmap = np.uint8(255 * heatmap)\n",
    "    heatmap = cv2.applyColorMap(heatmap, cv2.COLORMAP_JET)\n",
    "    return heatmap\n",
    "\n",
    "# Streamlit app\n",
    "st.markdown('<h1>Real-time Age & Gender Detection with Explainability</h1>', unsafe_allow_html=True)\n",
    "\n",
    "# Sidebar for upload and settings\n",
    "with st.sidebar:\n",
    "    st.markdown('<div class=\"sidebar-content\">', unsafe_allow_html=True)\n",
    "    st.header(\"Upload & Settings\")\n",
    "    uploaded_file = st.file_uploader(\"Choose an image...\", type=[\"jpg\", \"jpeg\", \"png\"])\n",
    "    if uploaded_file is not None:\n",
    "        image_path = \"temp_image.jpg\"\n",
    "        with open(image_path, \"wb\") as f:\n",
    "            f.write(uploaded_file.getbuffer())\n",
    "    else:\n",
    "        image_path = None\n",
    "    st.image(image_path, caption=\"Uploaded Image\", use_column_width=True) if image_path else st.write(\"No image uploaded.\")\n",
    "    st.markdown('</div>', unsafe_allow_html=True)\n",
    "\n",
    "# Feedback section in sidebar\n",
    "with st.sidebar:\n",
    "    st.markdown('<div class=\"sidebar-content\">', unsafe_allow_html=True)\n",
    "    st.subheader(\"Feedback\")\n",
    "    feedback = st.text_area(\"Share your thoughts on the app:\")\n",
    "    if st.button(\"Submit Feedback\"):\n",
    "        st.write(\"Thank you for your feedback!\")\n",
    "        # Optionally save feedback (e.g., to a file)\n",
    "    st.markdown('</div>', unsafe_allow_html=True)\n",
    "\n",
    "# Main content with cards\n",
    "if image_path:\n",
    "    st.markdown('<div class=\"main\">', unsafe_allow_html=True)\n",
    "\n",
    "    # Age Prediction Card\n",
    "    st.markdown('<div class=\"card\">', unsafe_allow_html=True)\n",
    "    st.markdown('<h3>Age Prediction</h3>', unsafe_allow_html=True)\n",
    "    age_result, age_probs = predict_age_group(image_path)\n",
    "    if isinstance(age_result, str):\n",
    "        st.error(age_result)\n",
    "    else:\n",
    "        st.write(f\"**Predicted Age Group:** {age_result}\")\n",
    "        fig, ax = plt.subplots()\n",
    "        ax.bar(['MIDDLE', 'OLD', 'YOUNG'], age_probs, color=['#3498db', '#e74c3c', '#2ecc71'])\n",
    "        ax.set_title(\"Age Group Probabilities\")\n",
    "        st.pyplot(fig)\n",
    "        # Grad-CAM\n",
    "        img = Image.open(image_path).convert('RGB')\n",
    "        img_resized = img.resize(IMG_SIZE)\n",
    "        img_array = np.expand_dims(np.array(img_resized) / 255.0, axis=0)\n",
    "        heatmap = grad_cam(age_model, img_array)\n",
    "        superimposed_img = cv2.addWeighted(cv2.cvtColor(np.array(img_resized), cv2.COLOR_RGB2BGR), 0.6, heatmap, 0.4, 0)\n",
    "        st.image(superimposed_img, caption=\"Grad-CAM Heatmap\", use_column_width=True)\n",
    "    st.markdown('</div>', unsafe_allow_html=True)\n",
    "\n",
    "    # Gender Prediction Card\n",
    "    st.markdown('<div class=\"card\">', unsafe_allow_html=True)\n",
    "    st.markdown('<h3>Gender Prediction</h3>', unsafe_allow_html=True)\n",
    "    gender_result = predict_gender(image_path)\n",
    "    if isinstance(gender_result, dict) and \"Error\" not in gender_result:\n",
    "        st.write(\"**Gender Probabilities:**\")\n",
    "        fig, ax = plt.subplots()\n",
    "        ax.pie(gender_result.values(), labels=gender_result.keys(), autopct='%1.1f%%', colors=['#3498db', '#e74c3c'])\n",
    "        ax.set_title(\"Gender Distribution\")\n",
    "        st.pyplot(fig)\n",
    "    else:\n",
    "        st.error(gender_result.get(\"Error\", \"Gender prediction failed\"))\n",
    "    st.write(\"**Note:** Gender explainability is not available due to the pre-trained model's complexity.\")\n",
    "    st.markdown('</div>', unsafe_allow_html=True)\n",
    "\n",
    "    st.markdown('</div>', unsafe_allow_html=True)\n",
    "\n",
    "# Dataset stats\n",
    "with st.sidebar:\n",
    "    st.markdown('<div class=\"sidebar-content\">', unsafe_allow_html=True)\n",
    "    st.subheader(\"Dataset Statistics\")\n",
    "    try:\n",
    "        csv_path = \"/mnt/data/faces_dataset/train.csv\"\n",
    "        df = pd.read_csv(csv_path)\n",
    "        df['ID'] = df['ID'].str.lower().str.replace(r'\\.jpg|\\.jpeg|\\.png', '', regex=True).str.strip()\n",
    "        image_dir = \"/mnt/data/faces_dataset/Train/\"\n",
    "        image_files = [f for f in os.listdir(image_dir) if os.path.isfile(os.path.join(image_dir, f))]\n",
    "        base_to_full = {os.path.splitext(f)[0].lower(): f for f in image_files}\n",
    "        df['filename'] = df['ID'].map(base_to_full)\n",
    "        df = df.dropna(subset=['filename'])\n",
    "        st.write(f\"**Total Valid Images:** {len(df)}\")\n",
    "        st.write(f\"**Class Distribution:** {df['Class'].value_counts().to_dict()}\")\n",
    "    except Exception as e:\n",
    "        st.error(f\"Error loading dataset stats: {e}\")\n",
    "    st.markdown('</div>', unsafe_allow_html=True)\n",
    "\n",
    "# Cleanup\n",
    "if image_path and os.path.exists(image_path):\n",
    "    os.remove(image_path)\n",
    "\n",
    "# Run the app\n",
    "if __name__ == \"__main__\":\n",
    "    st.run()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
